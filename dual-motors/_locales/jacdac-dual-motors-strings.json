{
  "jacdac.DualMotorsReg.Enabled": "Read-write bool (uint8_t). Turn the power to the motors on/off.\n* ```\nconst [enabled] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.DualMotorsReg.LoadRotationSpeed": "Constant rpm u16.16 (uint32_t). Revolutions per minute of the motor under full load.\n* ```\nconst [loadRotationSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n```",
  "jacdac.DualMotorsReg.LoadTorque": "Constant kg/cm u16.16 (uint32_t). Torque required to produce the rated power of an each electrical motor at load speed.\n* ```\nconst [loadTorque] = jdunpack<[number]>(buf, \"u16.16\")\n```",
  "jacdac.DualMotorsReg.Reversible": "Constant bool (uint8_t). Indicates if the motors can run backwards.\n* ```\nconst [reversible] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.DualMotorsReg.Speed": "Relative speed of the motors. Use positive/negative values to run the motor forwards and backwards.\nA speed of ``0`` while ``enabled`` acts as brake.\n* ```\nconst [left, right] = jdunpack<[number, number]>(buf, \"i1.15 i1.15\")\n```",
  "modules.DualMotorsClient.brake|block": "brake %motor",
  "modules.DualMotorsClient.enabled|block": "%dualmotors enabled",
  "modules.DualMotorsClient.run|block": "run %motor at left $left \\% right $right \\%",
  "modules.DualMotorsClient.setEnabled|block": "set %dualmotors %value=toggleOnOff",
  "modules.DualMotorsClient.speedLeft|block": "%dualmotors speed Left",
  "modules.DualMotorsClient.speedRight|block": "%dualmotors speed Right",
  "modules.DualMotorsClient.stop|block": "stop %motor",
  "modules.dualMotors1|block": "dual motors1",
  "modules|block": "modules",
  "{id:category}Jacdac": "Jacdac",
  "{id:category}Modules": "Modules",
  "{id:group}Motor": "Motor"
}