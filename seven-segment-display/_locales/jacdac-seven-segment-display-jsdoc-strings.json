{
  "jacdac.SevenSegmentDisplayCmd.SetNumber": "Argument: value f64 (uint64_t). Shows the number on the screen using the decimal dot if available.",
  "jacdac.SevenSegmentDisplayCmdPack.SetNumber": "Pack format for 'set_number' data.",
  "jacdac.SevenSegmentDisplayReg.Brightness": "Read-write ratio u0.16 (uint16_t). Controls the brightness of the LEDs. `0` means off.\n* ```\nconst [brightness] = jdunpack<[number]>(buf, \"u0.16\")\n```",
  "jacdac.SevenSegmentDisplayReg.DecimalPoint": "Constant bool (uint8_t). True if decimal points are available (on all digits).\n* ```\nconst [decimalPoint] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.SevenSegmentDisplayReg.DigitCount": "Constant uint8_t. The number of digits available on the display.\n* ```\nconst [digitCount] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.SevenSegmentDisplayReg.Digits": "Read-write bytes. Each byte encodes the display status of a digit using,\nwhere lowest bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\nIf incoming `digits` data is smaller than `digit_count`, the remaining digits will be cleared.\nThus, sending an empty `digits` payload clears the screen.\n* ```\nconst [digits] = jdunpack<[Buffer]>(buf, \"b\")\n```",
  "jacdac.SevenSegmentDisplayReg.DoubleDots": "Read-write bool (uint8_t). Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\nIf the column LEDs is not supported, the value remains false.\n* ```\nconst [doubleDots] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.SevenSegmentDisplayRegPack.Brightness": "Pack format for 'brightness' data.",
  "jacdac.SevenSegmentDisplayRegPack.DecimalPoint": "Pack format for 'decimal_point' data.",
  "jacdac.SevenSegmentDisplayRegPack.DigitCount": "Pack format for 'digit_count' data.",
  "jacdac.SevenSegmentDisplayRegPack.Digits": "Pack format for 'digits' data.",
  "jacdac.SevenSegmentDisplayRegPack.DoubleDots": "Pack format for 'double_dots' data.",
  "modules": "Jacdac modules",
  "modules.SevenSegmentDisplayClient": "A 7-segment numeric display, with one or more digits.",
  "modules.SevenSegmentDisplayClient.brightness": "Controls the brightness of the LEDs. `0` means off.",
  "modules.SevenSegmentDisplayClient.decimalPoint": "True if decimal points are available (on all digits).",
  "modules.SevenSegmentDisplayClient.digitCount": "The number of digits available on the display.",
  "modules.SevenSegmentDisplayClient.digits": "Each byte encodes the display status of a digit using,\nwhere bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\nIf incoming `digits` data is smaller than `digit_count`, the remaining digits will be cleared.\nThus, sending an empty `digits` payload clears the screen.\n* ```text\n- A -\nF   B\n|   |\n- G -\n|   |   -\nE   C  |DP|\n- D -   -\n```",
  "modules.SevenSegmentDisplayClient.doubleDots": "Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\nIf the column LEDs is not supported, the value remains false.",
  "modules.SevenSegmentDisplayClient.setBrightness": "Controls the brightness of the LEDs. `0` means off.",
  "modules.SevenSegmentDisplayClient.setDigits": "Each byte encodes the display status of a digit using,\nwhere bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\nIf incoming `digits` data is smaller than `digit_count`, the remaining digits will be cleared.\nThus, sending an empty `digits` payload clears the screen.\n* ```text\n- A -\nG   B\n|   |\n- F -\n|   |   -\nE   C  |DP|\n- D -   -\n```",
  "modules.SevenSegmentDisplayClient.setDoubleDots": "Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\nIf the column LEDs is not supported, the value remains false.",
  "modules.SevenSegmentDisplayClient.setNumber": "Shows the number on the screen using the decimal dot if available."
}