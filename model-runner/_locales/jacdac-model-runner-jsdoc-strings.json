{
  "jacdac": "Jacdac services",
  "jacdac.ModelRunnerClient.onDetection": "Run code when a specific even is detected in input data.",
  "jacdac.ModelRunnerCmd.Predict": "report SetModel\n```\nconst [modelPort] = jdunpack<[number]>(buf, \"u16\")\n```\n\nArgument: outputs pipe (bytes). Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.\n* ```\nconst [outputs] = jdunpack<[Buffer]>(buf, \"b[12]\")\n```",
  "jacdac.ModelRunnerCmd.SetModel": "Argument: model_size B uint32_t. Open pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.\n* ```\nconst [modelSize] = jdunpack<[number]>(buf, \"u32\")\n```",
  "jacdac.ModelRunnerCmdPack.Predict": "Pack format for 'predict' data.",
  "jacdac.ModelRunnerCmdPack.PredictReport": "Pack format for 'predict' data.",
  "jacdac.ModelRunnerCmdPack.SetModel": "Pack format for 'set_model' data.",
  "jacdac.ModelRunnerCmdPack.SetModelReport": "Pack format for 'set_model' data.",
  "jacdac.ModelRunnerReg.AllocatedArenaSize": "Read-only B uint32_t. Number of RAM bytes allocated for model execution.\n* ```\nconst [allocatedArenaSize] = jdunpack<[number]>(buf, \"u32\")\n```",
  "jacdac.ModelRunnerReg.AutoInvokeEvery": "Read-write uint16_t. When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\nThe `outputs` register will stream its value after each run.\nThis register is not stored in flash.\n* ```\nconst [autoInvokeEvery] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.ModelRunnerReg.Format": "Constant ModelFormat (uint32_t). The type of ML models supported by this service.\n`TFLite` is flatbuffer `.tflite` file.\n`ML4F` is compiled machine code model for Cortex-M4F.\nThe format is typically present as first or second little endian word of model file.\n* ```\nconst [format] = jdunpack<[jacdac.ModelRunnerModelFormat]>(buf, \"u32\")\n```",
  "jacdac.ModelRunnerReg.FormatVersion": "Constant uint32_t. A version number for the format.\n* ```\nconst [formatVersion] = jdunpack<[number]>(buf, \"u32\")\n```",
  "jacdac.ModelRunnerReg.InputShape": "Read-only. The shape of the input tensor.\n* ```\nconst [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n```",
  "jacdac.ModelRunnerReg.LastError": "Read-only string (bytes). Textual description of last error when running or loading model (if any).\n* ```\nconst [lastError] = jdunpack<[string]>(buf, \"s\")\n```",
  "jacdac.ModelRunnerReg.LastRunTime": "Read-only Î¼s uint32_t. The time consumed in last model execution.\n* ```\nconst [lastRunTime] = jdunpack<[number]>(buf, \"u32\")\n```",
  "jacdac.ModelRunnerReg.ModelSize": "Read-only B uint32_t. The size of the model in bytes.\n* ```\nconst [modelSize] = jdunpack<[number]>(buf, \"u32\")\n```",
  "jacdac.ModelRunnerReg.OutputShape": "Read-only. The shape of the output tensor.\n* ```\nconst [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n```",
  "jacdac.ModelRunnerReg.Outputs": "Read-only. Results of last model invocation as `float32` array.\n* ```\nconst [output] = jdunpack<[number[]]>(buf, \"f32[]\")\n```",
  "jacdac.ModelRunnerReg.Parallel": "Constant bool (uint8_t). If present and true this service can run models independently of other\ninstances of this service on the device.\n* ```\nconst [parallel] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.ModelRunnerRegPack.AllocatedArenaSize": "Pack format for 'allocated_arena_size' data.",
  "jacdac.ModelRunnerRegPack.AutoInvokeEvery": "Pack format for 'auto_invoke_every' data.",
  "jacdac.ModelRunnerRegPack.Format": "Pack format for 'format' data.",
  "jacdac.ModelRunnerRegPack.FormatVersion": "Pack format for 'format_version' data.",
  "jacdac.ModelRunnerRegPack.InputShape": "Pack format for 'input_shape' data.",
  "jacdac.ModelRunnerRegPack.LastError": "Pack format for 'last_error' data.",
  "jacdac.ModelRunnerRegPack.LastRunTime": "Pack format for 'last_run_time' data.",
  "jacdac.ModelRunnerRegPack.ModelSize": "Pack format for 'model_size' data.",
  "jacdac.ModelRunnerRegPack.OutputShape": "Pack format for 'output_shape' data.",
  "jacdac.ModelRunnerRegPack.Outputs": "Pack format for 'outputs' data.",
  "jacdac.ModelRunnerRegPack.Parallel": "Pack format for 'parallel' data.",
  "jacdac.modelRunner": "Default model runner"
}