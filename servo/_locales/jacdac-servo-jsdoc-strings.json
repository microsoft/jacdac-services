{
  "jacdac.ServoReg.ActualAngle": "Read-only ° i16.16 (int32_t). The current physical position of the arm, if the device has a way to sense the position.\n* ```\nconst [actualAngle] = jdunpack<[number]>(buf, \"i16.16\")\n```",
  "jacdac.ServoReg.Angle": "Read-write ° i16.16 (int32_t). Specifies the angle of the arm (request).\n* ```\nconst [angle] = jdunpack<[number]>(buf, \"i16.16\")\n```",
  "jacdac.ServoReg.Enabled": "Read-write bool (uint8_t). Turn the power to the servo on/off.\n* ```\nconst [enabled] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.ServoReg.MaxAngle": "Constant ° i16.16 (int32_t). Highest angle that can be set, typically 180°.\n* ```\nconst [maxAngle] = jdunpack<[number]>(buf, \"i16.16\")\n```",
  "jacdac.ServoReg.MaxPulse": "Read-write μs uint16_t. The length of pulse corresponding to highest angle.\n* ```\nconst [maxPulse] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.ServoReg.MinAngle": "Constant ° i16.16 (int32_t). Lowest angle that can be set, typically 0 °.\n* ```\nconst [minAngle] = jdunpack<[number]>(buf, \"i16.16\")\n```",
  "jacdac.ServoReg.MinPulse": "Read-write μs uint16_t. The length of pulse corresponding to lowest angle.\n* ```\nconst [minPulse] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.ServoReg.Offset": "Read-write ° i16.16 (int32_t). Correction applied to the angle to account for the servo arm drift.\n* ```\nconst [offset] = jdunpack<[number]>(buf, \"i16.16\")\n```",
  "jacdac.ServoReg.ResponseSpeed": "Constant s/60° u16.16 (uint32_t). Time to move 60°.\n* ```\nconst [responseSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n```",
  "jacdac.ServoReg.StallTorque": "Constant kg/cm u16.16 (uint32_t). The servo motor will stop rotating when it is trying to move a `stall_torque` weight at a radial distance of `1.0` cm.\n* ```\nconst [stallTorque] = jdunpack<[number]>(buf, \"u16.16\")\n```",
  "jacdac.ServoRegPack.ActualAngle": "Pack format for 'actual_angle' data.",
  "jacdac.ServoRegPack.Angle": "Pack format for 'angle' data.",
  "jacdac.ServoRegPack.Enabled": "Pack format for 'enabled' data.",
  "jacdac.ServoRegPack.MaxAngle": "Pack format for 'max_angle' data.",
  "jacdac.ServoRegPack.MaxPulse": "Pack format for 'max_pulse' data.",
  "jacdac.ServoRegPack.MinAngle": "Pack format for 'min_angle' data.",
  "jacdac.ServoRegPack.MinPulse": "Pack format for 'min_pulse' data.",
  "jacdac.ServoRegPack.Offset": "Pack format for 'offset' data.",
  "jacdac.ServoRegPack.ResponseSpeed": "Pack format for 'response_speed' data.",
  "jacdac.ServoRegPack.StallTorque": "Pack format for 'stall_torque' data.",
  "modules": "Jacdac modules",
  "modules.ServoClient": "Servo is a small motor with arm that can be pointing at a specific direction.\nTypically a servo angle is between 0° and 180° where 90° is the middle resting position.\n* The `min_pulse/max_pulse` may be read-only if the servo is permanently affixed to its Jacdac controller.",
  "modules.ServoClient.actualAngle": "The current physical position of the arm, if the device has a way to sense the position.",
  "modules.ServoClient.angle": "Specifies the angle of the arm (request).",
  "modules.ServoClient.enabled": "Turn the power to the servo on/off.",
  "modules.ServoClient.maxAngle": "Highest angle that can be set, typically 180°.",
  "modules.ServoClient.maxPulse": "The length of pulse corresponding to highest angle.",
  "modules.ServoClient.minAngle": "Lowest angle that can be set, typiclly 0 °.",
  "modules.ServoClient.minPulse": "The length of pulse corresponding to lowest angle.",
  "modules.ServoClient.offset": "Correction applied to the angle to account for the servo arm drift.",
  "modules.ServoClient.onActualAngleChangedBy": "Run code when the actual angle changes by the given threshold value.",
  "modules.ServoClient.responseSpeed": "Time to move 60°.",
  "modules.ServoClient.run": "Set the throttle on a continuous servo",
  "modules.ServoClient.run|param|speed": "the throttle of the motor from -100% to 100%",
  "modules.ServoClient.setAngle": "Specifies the angle of the arm (request).",
  "modules.ServoClient.setEnabled": "Turn the power to the servo on/off.",
  "modules.ServoClient.setMaxPulse": "The length of pulse corresponding to highest angle.",
  "modules.ServoClient.setMinPulse": "The length of pulse corresponding to lowest angle.",
  "modules.ServoClient.setOffset": "Correction applied to the angle to account for the servo arm drift.",
  "modules.ServoClient.stallTorque": "The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.",
  "modules.ServoClient.stop": "Stop sending commands to the servo so that its rotation will stop at the current position."
}