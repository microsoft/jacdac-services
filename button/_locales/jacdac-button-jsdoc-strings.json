{
  "jacdac.ButtonEvent.Down": "Emitted when button goes from inactive to active.",
  "jacdac.ButtonEvent.Hold": "Argument: time ms uint32_t. Emitted when the press time is greater than 500ms, and then at least every 500ms\nas long as the button remains pressed. The 'time' parameter records the the amount of time\nthat the button has been held (since the down event).\n* ```\nconst [time] = jdunpack<[number]>(buf, \"u32\")\n```",
  "jacdac.ButtonEvent.Up": "Argument: time ms uint32_t. Emitted when button goes from active to inactive. The 'time' parameter\nrecords the amount of time between the down and up events.\n* ```\nconst [time] = jdunpack<[number]>(buf, \"u32\")\n```",
  "jacdac.ButtonEventPack.Hold": "Pack format for 'hold' data.",
  "jacdac.ButtonEventPack.Up": "Pack format for 'up' data.",
  "jacdac.ButtonReg.Analog": "Constant bool (uint8_t). Indicates if the button provides analog `pressure` readings.\n* ```\nconst [analog] = jdunpack<[number]>(buf, \"u8\")\n```",
  "jacdac.ButtonReg.Pressed": "Read-only bool (uint8_t). Determines if the button is pressed currently.",
  "jacdac.ButtonReg.Pressure": "Read-only ratio u0.16 (uint16_t). Indicates the pressure state of the button, where `0` is open.\n* ```\nconst [pressure] = jdunpack<[number]>(buf, \"u0.16\")\n```",
  "jacdac.ButtonRegPack.Analog": "Pack format for 'analog' data.",
  "jacdac.ButtonRegPack.Pressed": "Pack format for 'pressed' data.",
  "jacdac.ButtonRegPack.Pressure": "Pack format for 'pressure' data.",
  "modules": "Jacdac modules",
  "modules.ButtonClient": "A push-button, which returns to inactive position when not operated anymore.",
  "modules.ButtonClient.analog": "Indicates if the button provides analog ``pressure`` readings.",
  "modules.ButtonClient.holdDuration": "The latest reported hold duration when the button is down.\n* The `down` and `hold` events also report the total hold duration in milliseconds.\nThe value is the last hold duration while the button is up.",
  "modules.ButtonClient.onDown": "Emitted when button goes from inactive to active.",
  "modules.ButtonClient.onEvent": "Register code to run when an event is raised",
  "modules.ButtonClient.onHold": "Emitted when the press time is greater than 500ms, and then at least every 500ms\nas long as the button remains pressed. The 'time' parameter records the the amount of time\nthat the button has been held (since the down event).",
  "modules.ButtonClient.onPressureChangedBy": "Run code when the pressure changes by the given threshold value.",
  "modules.ButtonClient.onUp": "Emitted when button goes from active to inactive. The 'time' parameter\nrecords the amount of time between the down and up events.",
  "modules.ButtonClient.pressed": "Determines if the button is pressed currently.\n* If the event ``down`` is observed, ``pressed`` is true; if ``up`` or ``hold`` are observed, ``pressed`` is false.\nTo initialize, wait for any event or timeout to ``pressed`` is true after 750ms (1.5x hold time).",
  "modules.ButtonClient.pressure": "Indicates the pressure state of the button, where ``0`` is open."
}