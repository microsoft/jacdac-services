{
  "jacdac.LedReg.ActualBrightness": "Read-only ratio u0.8 (uint8_t). This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.\n* ```\nconst [actualBrightness] = jdunpack<[number]>(buf, \"u0.8\")\n```",
  "jacdac.LedReg.Brightness": "Read-write ratio u0.8 (uint8_t). Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.\n* ```\nconst [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n```",
  "jacdac.LedReg.LedsPerPixel": "Constant # uint16_t. If known, specifies the number of LEDs in parallel on this device.\nThe actual number of LEDs is `num_pixels * leds_per_pixel`.\n* ```\nconst [ledsPerPixel] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.LuminousIntensity": "Constant mcd uint16_t. The luminous intensity of all the LEDs, at full brightness, in micro candella.\n* ```\nconst [luminousIntensity] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.MaxPower": "Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n* ```\nconst [maxPower] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.NumColumns": "Constant # uint16_t. If the LED pixel strip is a matrix, specifies the number of columns.\n* ```\nconst [numColumns] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.NumPixels": "Constant # uint16_t. Specifies the number of pixels in the strip.\n* ```\nconst [numPixels] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.Pixels": "Read-write bytes. A buffer of 24bit RGB color entries for each LED, in R, G, B order.\nWhen writing, if the buffer is too short, the remaining pixels are set to `#000000`;\nIf the buffer is too long, the write may be ignored, or the additional pixels may be ignored.\nIf the number of pixels is greater than `max_pixels_length`, the read should return an empty payload.\n* ```\nconst [pixels] = jdunpack<[Buffer]>(buf, \"b\")\n```",
  "jacdac.LedReg.Variant": "Constant Variant (uint8_t). Specifies the shape of the light strip.\n* ```\nconst [variant] = jdunpack<[jacdac.LedVariant]>(buf, \"u8\")\n```",
  "jacdac.LedReg.WaveLength": "Constant nm uint16_t. If monochrome LED, specifies the wave length of the LED.\nRegister is missing for RGB LEDs.\n* ```\nconst [waveLength] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedVariant.Jewel|block": "jewel",
  "jacdac.LedVariant.Matrix|block": "matrix",
  "jacdac.LedVariant.Ring|block": "ring",
  "jacdac.LedVariant.Stick|block": "stick",
  "jacdac.LedVariant.Strip|block": "strip",
  "modules.LedClient.brightness|block": "%led brightness",
  "modules.LedClient.numPixels|block": "%led number of pixels",
  "modules.LedClient.plotBarGraph|block": "plot %strip bar graph of $value||up to $high",
  "modules.LedClient.rotate|block": "rotate %display pixels by %offset",
  "modules.LedClient.setAll|block": "set %display all to %rgb=colorNumberPicker",
  "modules.LedClient.setBrightness|block": "set %led brightness to %value",
  "modules.LedClient.setPixelColor|block": "set %display color at pixel %index to %rgb=colorNumberPicker",
  "modules.LedClient.shift|block": "shift %display pixels by %offset",
  "{id:category}Jacdac": "Jacdac",
  "{id:category}Modules": "Modules",
  "{id:group}LED": "LED"
}