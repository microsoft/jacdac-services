{
  "jacdac.LedReg.ActualBrightness": "Read-only ratio u0.8 (uint8_t). This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.\n* ```\nconst [actualBrightness] = jdunpack<[number]>(buf, \"u0.8\")\n```",
  "jacdac.LedReg.Brightness": "Read-write ratio u0.8 (uint8_t). Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.\n* ```\nconst [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n```",
  "jacdac.LedReg.LedsPerPixel": "Constant # uint16_t. If known, specifies the number of LEDs in parallel on this device.\nThe actual number of LEDs is `num_pixels * leds_per_pixel`.\n* ```\nconst [ledsPerPixel] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.LuminousIntensity": "Constant mcd uint16_t. The luminous intensity of all the LEDs, at full brightness, in micro candella.\n* ```\nconst [luminousIntensity] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.MaxPower": "Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n* ```\nconst [maxPower] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.NumColumns": "Constant # uint16_t. If the LED pixel strip is a matrix, specifies the number of columns.\n* ```\nconst [numColumns] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.NumPixels": "Constant # uint16_t. Specifies the number of pixels in the strip.\n* ```\nconst [numPixels] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedReg.Pixels": "Read-write bytes. A buffer of 24bit RGB color entries for each LED, in R, G, B order.\nWhen writing, if the buffer is too short, the remaining pixels are set to `#000000`;\nIf the buffer is too long, the write may be ignored, or the additional pixels may be ignored.\nIf the number of pixels is greater than `max_pixels_length`, the read should return an empty payload.\n* ```\nconst [pixels] = jdunpack<[Buffer]>(buf, \"b\")\n```",
  "jacdac.LedReg.Variant": "Constant Variant (uint8_t). Specifies the shape of the light strip.\n* ```\nconst [variant] = jdunpack<[jacdac.LedVariant]>(buf, \"u8\")\n```",
  "jacdac.LedReg.WaveLength": "Constant nm uint16_t. If monochrome LED, specifies the wave length of the LED.\nRegister is missing for RGB LEDs.\n* ```\nconst [waveLength] = jdunpack<[number]>(buf, \"u16\")\n```",
  "jacdac.LedRegPack.ActualBrightness": "Pack format for 'actual_brightness' data.",
  "jacdac.LedRegPack.Brightness": "Pack format for 'brightness' data.",
  "jacdac.LedRegPack.LedsPerPixel": "Pack format for 'leds_per_pixel' data.",
  "jacdac.LedRegPack.LuminousIntensity": "Pack format for 'luminous_intensity' data.",
  "jacdac.LedRegPack.MaxPower": "Pack format for 'max_power' data.",
  "jacdac.LedRegPack.NumColumns": "Pack format for 'num_columns' data.",
  "jacdac.LedRegPack.NumPixels": "Pack format for 'num_pixels' data.",
  "jacdac.LedRegPack.Pixels": "Pack format for 'pixels' data.",
  "jacdac.LedRegPack.Variant": "Pack format for 'variant' data.",
  "jacdac.LedRegPack.WaveLength": "Pack format for 'wave_length' data.",
  "modules.LedClient.actualBrightness": "This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.",
  "modules.LedClient.brightness": "Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.",
  "modules.LedClient.ledsPerPixel": "If known, specifies the number of LEDs in parallel on this device.\nThe actual number of LEDs is `num_pixels * leds_per_pixel`.",
  "modules.LedClient.luminousIntensity": "The luminous intensity of all the LEDs, at full brightness, in micro candella.",
  "modules.LedClient.maxPower": "Limit the power drawn by the light-strip (and controller).",
  "modules.LedClient.numColumns": "If the LED pixel strip is a matrix, specifies the number of columns.",
  "modules.LedClient.numPixels": "Specifies the number of pixels in the strip.",
  "modules.LedClient.pixels": "Gets the pixel color buffer, where every pixel color is encoded as a 24 bit RGB color.",
  "modules.LedClient.plotBarGraph": "Displays a vertical bar graph based on the `value` and `high` value.\nIf `high` is 0, the chart gets adjusted automatically.",
  "modules.LedClient.plotBarGraph|param|high": "maximum value, eg: 255",
  "modules.LedClient.plotBarGraph|param|value": "current value to plot",
  "modules.LedClient.rotate": "Rotate LEDs forward.\nYou need to call ``show`` to make the changes visible.",
  "modules.LedClient.rotate|param|offset": "number of pixels to rotate forward, eg: 1",
  "modules.LedClient.setAll": "Set all of the pixels on the strip to one RGB color.",
  "modules.LedClient.setAll|param|rgb": "RGB color of the LED",
  "modules.LedClient.setAutoShow": "Turn on/off the ability to automatically show changes. If false, the user must call 'show'.",
  "modules.LedClient.setBrightness": "Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.",
  "modules.LedClient.setMaxPower": "Limit the power drawn by the light-strip (and controller).",
  "modules.LedClient.setPixelColor": "Set a single of the pixels on the strip to one RGB color.\nYou need to call ``show`` to make the changes visible.",
  "modules.LedClient.setPixelColor|param|rgb": "RGB color of the LED",
  "modules.LedClient.setPixels": "Sets the local pixel color buffer, where every pixel color is encoded as a 24 bit RGB color.",
  "modules.LedClient.shift": "Shift LEDs forward and clear with zeros.\nYou need to call ``show`` to make the changes visible.",
  "modules.LedClient.shift|param|offset": "number of pixels to shift forward, eg: 1",
  "modules.LedClient.show": "Sends the local pixel buffer to device immediately, instead of waiting for the rendering loop",
  "modules.LedClient.variant": "Specifies the shape of the light strip.",
  "modules.LedClient.waveLength": "If monochrome LED, specifies the wave length of the LED.\nRegister is missing for RGB LEDs."
}